---
title: "KaggleXChallenge"
author: "Arindam Baruah"
format: html
---

```{r}
library(tidyverse)
library(naniar)
```

```{r}
df_train <- read_csv("data/train.csv")
df_test <- read_csv("data/test.csv")
```

# EDA

```{r}
ggplot(data = df_train,aes(y = as.factor(model_year),x = price)) + geom_boxplot()
```

```{r}
ggplot(data = df_train,aes(y = milage,x = price)) + geom_point()
```

```{r}
ggplot(data = df_train ,aes(y = fuel_type,x = price)) + geom_boxplot()
```


```{r}
ggplot(data = df_train %>% filter(price < 10^6),aes(y = int_col,x = price)) + geom_boxplot()
```


```{r}
ggplot(data = df_train %>% filter(price < 10^6),aes(y = accident,x = price)) + geom_boxplot()
```


```{r}
ggplot(data = df_train %>% filter(price < 10^6),aes(y = transmission,x = price)) + geom_boxplot()
```


```{r}
ggplot(data = df_train,aes(y = ext_col,x = price)) + geom_boxplot()
```


```{r}
ggplot(data = df_train,aes(y = ext_col,x = price)) + geom_boxplot()
```



```{r}
ggplot(data = df_train %>% filter(price > 10^6),aes(y = model,x = price)) + geom_boxplot()
```

```{r}
engine_specs <- str_split(df_train$engine," ") %>% unlist() %>% as.data.frame()

```

```{r}
engine_specs <- strsplit(df_train$engine, " ")

max_length <- max(sapply(engine_specs, length))


split_df <- as.data.frame(matrix(NA, nrow = nrow(df_train), ncol = max_length))


colnames(split_df) <- paste0("Engine_spec", 1:max_length)

for (i in 1:nrow(df_train)) {
  split_df[i, 1:length(engine_specs[[i]])] <- engine_specs[[i]]
}
```


```{r}
# Combine the new columns with the original dataframe
df_train <- bind_cols(df_train, split_df)
```


```{r}
df_train <- df_train %>% mutate(premiumness = case_when(price > 10^6 ~ "Luxurious",
                                                        price < 10^6 & price >250000 ~ "Premium",
                                                        price > 80000 & price <= 250000 ~ "Mid range",
                                                        
                                                        price <= 80000 ~ "General"))
```


```{r}
ggplot(data = df_train,aes(y = price,x = premiumness)) + geom_boxplot()
```




```{r}
ggplot(data = df_train,aes(x = price,y = Engine_spec6)) + geom_boxplot()

```

```{r}
keep_numbers_decimals <- function(x) {
  num_str <- str_extract_all(x, "[0-9.]+")[[1]]
  num_str <- paste(num_str, collapse = "")
  as.numeric(num_str)
}

df_train$Engine_spec1 <- sapply(df_train$Engine_spec1, keep_numbers_decimals)
df_train$Engine_spec1 <- df_train$Engine_spec1/10
```


```{r}
ggplot(data = df_train,aes(x = premiumness,y = Engine_spec1)) + geom_boxplot()

```

```{r}

df_group_brand <- df_train %>% group_by(brand,premiumness) %>% summarise(Total = n())
ggplot(df_group_brand,aes(x = reorder(brand,Total),y = Total,fill = premiumness)) + geom_col() + coord_flip() 
```

```{r}
ggplot(data = df_train,aes(y = Engine_spec1,x = price)) + geom_point()
```
```{r}
ggplot(data = df_train %>% filter(premiumness != "Luxurious"),aes(y = Engine_spec2,x = price)) + geom_boxplot()
```




# Model fit

## Linear model


```{r}

gg_miss_var(df_train)

```


```{r}

df_train <- read_csv("data/train.csv")

engine_specs <- str_split(df_train$engine," ") %>% unlist() %>% as.data.frame()

df_train <- df_train %>% filter(model_year>1974)

```

```{r}
engine_specs <- strsplit(df_train$engine, " ")

max_length <- max(sapply(engine_specs, length))

split_df <- as.data.frame(matrix(NA, nrow = nrow(df_train), ncol = max_length))


colnames(split_df) <- paste0("Engine_spec", 1:max_length)

for (i in 1:nrow(df_train)) {
  split_df[i, 1:length(engine_specs[[i]])] <- engine_specs[[i]]
}
```


```{r}
# Combine the new columns with the original dataframe
df_train <- bind_cols(df_train, split_df)
```

```{r}
#| warning: false

df_train$Engine_spec1 <- sapply(df_train$Engine_spec1, keep_numbers_decimals)
df_train$Engine_spec1 <- df_train$Engine_spec1

df_train$Engine_spec2 <- sapply(df_train$Engine_spec2, keep_numbers_decimals)
df_train$Engine_spec2 <- df_train$Engine_spec2

df_train$Engine_spec3 <- sapply(df_train$Engine_spec3, keep_numbers_decimals)
df_train$Engine_spec3 <- df_train$Engine_spec3

```



```{r}

df_train <- df_train %>% select(-c(engine,brand,model,transmission,Engine_spec9,Engine_spec8,Engine_spec7,Engine_spec6,
                                   Engine_spec4,Engine_spec5,clean_title,int_col,ext_col))
df_train
```



```{r}
linear_model <- lm(price~ .,data = df_train[,-1])
```




```{r}
library(broom)
glance(linear_model)
```

```{r}
df_test
```
# Testing

```{r}

df_test <- read_csv("data/test.csv")
engine_specs <- str_split(df_test$engine," ") %>% unlist() %>% as.data.frame()

df_test$model_year <-as.Date(paste0(df_test$model_year,"-01-01"))

```

```{r}
engine_specs <- strsplit(df_test$engine, " ")

max_length <- max(sapply(engine_specs, length))


split_df <- as.data.frame(matrix(NA, nrow = nrow(df_test), ncol = max_length))


colnames(split_df) <- paste0("Engine_spec", 1:max_length)

for (i in 1:nrow(df_test)) {
  split_df[i, 1:length(engine_specs[[i]])] <- engine_specs[[i]]
}
```



```{r}
# Combine the new columns with the original dataframe
df_test <- bind_cols(df_test, split_df)
```




```{r}
#| warning: false
df_test$Engine_spec1 <- sapply(df_test$Engine_spec1, keep_numbers_decimals)
df_test$Engine_spec1 <- df_test$Engine_spec1

df_test$Engine_spec2 <- sapply(df_test$Engine_spec2, keep_numbers_decimals)
df_test$Engine_spec2 <- df_test$Engine_spec2

df_test$Engine_spec3 <- sapply(df_test$Engine_spec3, keep_numbers_decimals)
df_test$Engine_spec3 <- df_test$Engine_spec3

```



```{r}
df_test <- df_test %>% select(-c(engine,brand,model,transmission,Engine_spec9,
                                 Engine_spec8,Engine_spec7,Engine_spec6,
                                 Engine_spec4,Engine_spec5,clean_title,
                                 int_col,ext_col))

df_test
```


```{r}

linear_preds <- tibble(id = df_test$id,
  price = predict(linear_model,newdata=df_test))

linear_preds <- linear_preds %>% mutate(across(price, ~replace_na(., median(., na.rm=TRUE))))

write_csv(linear_preds, file="predictions1.csv")
```





---- Standalone -----



# Adding transmission info


```{r}

df_train <- read_csv("data/train.csv")

engine_specs <- str_split(df_train$engine," ") %>% unlist() %>% as.data.frame()
df_train$model_year <- as.Date(paste0(df_train$model_year,"-01-01"))

df_train <- df_train %>% filter(model_year > 1974)
```

```{r}
engine_specs <- strsplit(df_train$engine, " ")

max_length <- max(sapply(engine_specs, length))


split_df <- as.data.frame(matrix(NA, nrow = nrow(df_train), ncol = max_length))


colnames(split_df) <- paste0("Engine_spec", 1:max_length)

for (i in 1:nrow(df_train)) {
  split_df[i, 1:length(engine_specs[[i]])] <- engine_specs[[i]]
}
```


```{r}
# Combine the new columns with the original dataframe
df_train <- bind_cols(df_train, split_df)
```

```{r}
#| warning: false

df_train$Engine_spec1 <- sapply(df_train$Engine_spec1, keep_numbers_decimals)
df_train$Engine_spec1 <- df_train$Engine_spec1

df_train$Engine_spec2 <- sapply(df_train$Engine_spec2, keep_numbers_decimals)
df_train$Engine_spec2 <- df_train$Engine_spec2

df_train$Engine_spec3 <- sapply(df_train$Engine_spec3, keep_numbers_decimals)
df_train$Engine_spec3 <- df_train$Engine_spec3

```





```{r}
df_train <- df_train %>% mutate(transmission_group = case_when(
                                                   str_detect(transmission,"1-Speed") ~ "1 speed Automatic",
                                                   str_detect(transmission,"2-Speed") ~ "2 speed Automatic",
                                                   str_detect(transmission,"3-Speed") ~ "3 speed Automatic",
                                                   str_detect(transmission,"4-Speed") ~ "4 speed Automatic",
                                                   str_detect(transmission,"5-Speed") ~ "5 speed Automatic",
                                                   str_detect(transmission,"6-Speed") ~ "6 speed Automatic",
                                                   str_detect(transmission,"7-Speed") ~ "7 speed Automatic",
                                                   str_detect(transmission,"8-Speed") ~ "8 speed Automatic",
                                                   str_detect(transmission,"9-Speed") ~ "9 speed Automatic",
                                                   str_detect(transmission,"10-Speed") ~ "10 speed Automatic",
                                                   str_detect(transmission,"M/T") ~ "Manual",
                                                   str_detect(transmission,"mt") ~ "Manual",
                                                   str_detect(transmission,"Automatic") ~ "Automatic",
                                                   str_detect(transmission,"Manual") ~ "Manual",
                                                   str_detect(transmission,"CVT") ~ "CVT",
                                                   str_detect(transmission,"Variable") ~ "CVT",
                                                   str_detect(transmission,"Transmission w/Dual Shift Mode") ~ "Auto-manual",
                                                   str_detect(transmission,"Transmission Overdrive Switch") ~ "Automatic",
                                                   str_detect(transmission,"DCT") ~ "Auto-manual",
                                                   .default = "Uncategorised")
                                                   )
```


# Including color information

## ext_col

(Marginally reduced accuracy)

```{r}
df_train <- df_train %>% mutate(ext_color_group = case_when(
                                                   str_detect(ext_col,"Metallic") ~ "Metallic",
                                                   str_detect(ext_col,"Magnetic") ~ "Magnetic",
                                                   str_detect(ext_col,"White") ~ "White",
                                                   str_detect(ext_col,"Green") ~ "Green",
                                                   str_detect(ext_col,"Gray") ~ "Gray",
                                                   str_detect(ext_col,"Silver") ~ "Silver",
                                                   str_detect(ext_col,"Black") ~ "Black",
                                                   str_detect(ext_col,"Purple") ~ "Purple",
                                                   str_detect(ext_col,"Red") ~ "Red",
                                                   str_detect(ext_col,"Pearl") ~ "Pearlscent",
                                                   str_detect(ext_col,"Orange") ~ "Orange",
                                                   str_detect(ext_col,"Blue") ~ "Blue",
                                                   str_detect(int_col,"Gold") ~ "Gold",
                                                   str_detect(int_col,"Brown") ~ "Brown",
                                                   .default = "Uncategorised")
                                                   )
```

## int_col

(Reduced accuracy)

```{r}
df_train <- df_train %>% mutate(int_color_group = case_when(
                                                   str_detect(int_col,"Metallic") ~ "Metallic",
                                                   str_detect(int_col,"Magnetic") ~ "Magnetic",
                                                   str_detect(int_col,"White") ~ "White",
                                                   str_detect(int_col,"Green") ~ "Green",
                                                   str_detect(int_col,"Gray") ~ "Gray",
                                                   str_detect(int_col,"Silver") ~ "Silver",
                                                   str_detect(int_col,"Black") ~ "Black",
                                                   str_detect(int_col,"Purple") ~ "Purple",
                                                   str_detect(int_col,"Red") ~ "Red",
                                                   str_detect(int_col,"Pearl") ~ "Pearlscent",
                                                   str_detect(int_col,"Orange") ~ "Orange",
                                                   str_detect(int_col,"Blue") ~ "Blue",
                                                   str_detect(int_col,"Beige") ~ "Beige",
                                                   str_detect(int_col,"Gold") ~ "Gold",
                                                   str_detect(int_col,"Brown") ~ "Brown",
                                                   .default = "Uncategorised")
                                                   )
```


# Aggregating brands

```{r}

df_train <- df_train %>% mutate(premiumness = case_when(price > 10^6 ~ "Luxurious",
                                                        price < 10^6 & price >250000 ~ "Premium",
                                                        price > 15000 & price <= 250000 ~ "Mid range",
                                                        
                                                        price <= 15000 ~ "General"))

luxurious_brands <- df_train %>% filter(premiumness == "Luxurious") %>% select(brand)
general_brands <- df_train %>% filter(premiumness == "General") %>% select(brand)

#df_train <- df_train %>% mutate(brand_luxury= if_else(brand %in% luxurious_brands$brand,"Luxurious","Not Luxurious"))
df_train <- df_train %>% mutate(brand_general= if_else(brand %in% luxurious_brands$brand,"General","Not General"))

```


# Adding model information

```{r}
df_train <- df_train %>% mutate(luxury_models = case_when(
                                                   str_detect(model,"Carrera") ~ "Luxury",
                                                   str_detect(model,"SL") ~ "Luxury",
                                                   str_detect(model,"Corvette") ~ "Luxury",
                                                   str_detect(model,"AMG") ~ "Luxury",
                                                   str_detect(model,"S-Class") ~ "Luxury",
                                                   str_detect(model,"Sierra 1500") ~ "Luxury",
                                                   str_detect(model,"Cayenne") ~ "Luxury",
                                                   str_detect(model,"R8") ~ "Luxury",
                                                   str_detect(model,"A7") ~ "Luxury",
                                                   str_detect(model,"Tahoe") ~ "Luxury",
                                                   str_detect(model,"Tacoma") ~ "Luxury",
                                                   str_detect(model,"E-class") ~ "Luxury",
                                                   str_detect(model,"911") ~ "Luxury",
                                                   str_detect(model,"570S") ~ "Luxury",
                                                   str_detect(model,"Laramie") ~ "Luxury",
                                                   .default = "Non Luxury")
                                                   )
```



```{r}
df_train <- df_train %>% select(-c(engine,brand,model,transmission,Engine_spec9,Engine_spec8,Engine_spec7,Engine_spec6,
                                   Engine_spec4,Engine_spec5,clean_title,int_col,ext_col,premiumness))
df_train
```

```{r}
df_train <- df_train %>%
  mutate(across(c(Engine_spec1, Engine_spec2, Engine_spec3), ~ replace_na(., median(., na.rm = TRUE))))
```



```{r}


linear_model <- lm(log(price) ~ ., data = df_train[,-1])
```



```{r}

df_test <- read_csv("data/test.csv")
engine_specs <- str_split(df_test$engine," ") %>% unlist() %>% as.data.frame()
df_test$model_year <- as.Date(paste0(df_test$model_year,"-01-01"))

```

```{r}
engine_specs <- strsplit(df_test$engine, " ")

max_length <- max(sapply(engine_specs, length))


split_df <- as.data.frame(matrix(NA, nrow = nrow(df_test), ncol = max_length))


colnames(split_df) <- paste0("Engine_spec", 1:max_length)

for (i in 1:nrow(df_test)) {
  split_df[i, 1:length(engine_specs[[i]])] <- engine_specs[[i]]
}
```


```{r}
# Combine the new columns with the original dataframe
df_test <- bind_cols(df_test, split_df)
```


```{r}
#| warning: false
df_test$Engine_spec1 <- sapply(df_test$Engine_spec1, keep_numbers_decimals)
df_test$Engine_spec1 <- df_test$Engine_spec1

df_test$Engine_spec2 <- sapply(df_test$Engine_spec2, keep_numbers_decimals)
df_test$Engine_spec2 <- df_test$Engine_spec2

df_test$Engine_spec3 <- sapply(df_test$Engine_spec3, keep_numbers_decimals)
df_test$Engine_spec3 <- df_test$Engine_spec3

```




```{r}
df_test <- df_test %>% mutate(transmission_group = case_when(
                                                   str_detect(transmission,"1-Speed") ~ "1 speed Automatic",
                                                   str_detect(transmission,"2-Speed") ~ "2 speed Automatic",
                                                   str_detect(transmission,"3-Speed") ~ "3 speed Automatic",
                                                   str_detect(transmission,"4-Speed") ~ "4 speed Automatic",
                                                   str_detect(transmission,"5-Speed") ~ "5 speed Automatic",
                                                   str_detect(transmission,"6-Speed") ~ "6 speed Automatic",
                                                   str_detect(transmission,"7-Speed") ~ "7 speed Automatic",
                                                   str_detect(transmission,"8-Speed") ~ "8 speed Automatic",
                                                   str_detect(transmission,"9-Speed") ~ "9 speed Automatic",
                                                   str_detect(transmission,"10-Speed") ~ "10 speed Automatic",
                                                   str_detect(transmission,"M/T") ~ "Manual",
                                                   str_detect(transmission,"mt") ~ "Manual",
                                                   str_detect(transmission,"Automatic") ~ "Automatic",
                                                   str_detect(transmission,"Manual") ~ "Manual",
                                                   str_detect(transmission,"CVT") ~ "CVT",
                                                   str_detect(transmission,"Variable") ~ "CVT",
                                                   str_detect(transmission,"Transmission w/Dual Shift Mode") ~ "Auto-manual",
                                                   str_detect(transmission,"Transmission Overdrive Switch") ~ "Automatic",
                                                   str_detect(transmission,"DCT") ~ "Auto-manual",
                                                   .default = "Uncategorised")
                                                   )
```


# Including color information

```{r}
df_test <- df_test %>% mutate(ext_color_group = case_when(
                                                   str_detect(ext_col,"Metallic") ~ "Metallic",
                                                   str_detect(ext_col,"Magnetic") ~ "Magnetic",
                                                   str_detect(ext_col,"White") ~ "White",
                                                   str_detect(ext_col,"Green") ~ "Green",
                                                   str_detect(ext_col,"Gray") ~ "Gray",
                                                   str_detect(ext_col,"Silver") ~ "Silver",
                                                   str_detect(ext_col,"Black") ~ "Black",
                                                   str_detect(ext_col,"Purple") ~ "Purple",
                                                   str_detect(ext_col,"Red") ~ "Red",
                                                   str_detect(ext_col,"Pearl") ~ "Pearlscent",
                                                   str_detect(ext_col,"Orange") ~ "Orange",
                                                   str_detect(ext_col,"Blue") ~ "Blue",
                                                   str_detect(ext_col,"Gold") ~ "Gold",
                                                   str_detect(ext_col,"Brown") ~ "Brown",
                                                   .default = "Uncategorised")
                                                   )
```

```{r}
df_test <- df_test %>% mutate(int_color_group = case_when(
                                                   str_detect(int_col,"Metallic") ~ "Metallic",
                                                   str_detect(int_col,"Magnetic") ~ "Magnetic",
                                                   str_detect(int_col,"White") ~ "White",
                                                   str_detect(int_col,"Green") ~ "Green",
                                                   str_detect(int_col,"Gray") ~ "Gray",
                                                   str_detect(int_col,"Silver") ~ "Silver",
                                                   str_detect(int_col,"Black") ~ "Black",
                                                   str_detect(int_col,"Purple") ~ "Purple",
                                                   str_detect(int_col,"Red") ~ "Red",
                                                   str_detect(int_col,"Pearl") ~ "Pearlscent",
                                                   str_detect(int_col,"Orange") ~ "Orange",
                                                   str_detect(int_col,"Blue") ~ "Blue",
                                                   str_detect(int_col,"Beige") ~ "Beige",
                                                   str_detect(int_col,"Gold") ~ "Gold",
                                                   str_detect(int_col,"Brown") ~ "Brown",
                                                   .default = "Uncategorised")
                                                   )
```


```{r}
df_test <- df_test %>% mutate(luxury_models = case_when(
                                                   str_detect(model,"Carrera") ~ "Luxury",
                                                   str_detect(model,"SL") ~ "Luxury",
                                                   str_detect(model,"Corvette") ~ "Luxury",
                                                   str_detect(model,"AMG") ~ "Luxury",
                                                   str_detect(model,"S-Class") ~ "Luxury",
                                                   str_detect(model,"Sierra 1500") ~ "Luxury",
                                                   str_detect(model,"Cayenne") ~ "Luxury",
                                                   str_detect(model,"R8") ~ "Luxury",
                                                   str_detect(model,"A7") ~ "Luxury",
                                                   str_detect(model,"Tahoe") ~ "Luxury",
                                                   str_detect(model,"Tacoma") ~ "Luxury",
                                                   str_detect(model,"E-class") ~ "Luxury",
                                                   str_detect(model,"911") ~ "Luxury",
                                                   str_detect(model,"570S") ~ "Luxury",
                                                   str_detect(model,"Laramie") ~ "Luxury",
                                                   .default = "Non Luxury")
                                                   )
```


```{r}


#df_test <- df_test %>% mutate(brand_luxury = if_else(brand %in% luxurious_brands$brand,"Luxurious","Not Luxurious"))
df_test <- df_test %>% mutate(brand_general= if_else(brand %in% general_brands$brand,"General","Not General"))
```


```{r}
df_test  <- df_test %>%
  mutate(across(c(Engine_spec1, Engine_spec2, Engine_spec3), ~ replace_na(., median(., na.rm = TRUE))))
```


```{r}
df_test <- df_test %>% select(-c(engine,brand,model,transmission,Engine_spec9,Engine_spec8,Engine_spec7,Engine_spec6,
                                   Engine_spec4,Engine_spec5,clean_title,int_col,ext_col))

df_test
```


```{r}
linear_preds <- tibble(id = df_test$id,
  price = exp(predict(linear_model,newdata=df_test)))

linear_preds <- linear_preds %>% mutate(across(price, ~replace_na(., median(., na.rm=TRUE))))

write_csv(linear_preds, file="predictions24.csv")
```

# Random forest

```{r}
library(randomForest)

rf_model <- randomForest(price ~ ., data = df_train, ntree = 500, 
                         mtry = 3,min_n = 2, importance = TRUE)
```



```{r}
rf_preds <- tibble(id = df_test$id,
  price = predict(rf_model,newdata=df_test))

rf_preds <- rf_preds %>% mutate(across(price, ~replace_na(., median(., na.rm=TRUE))))

write_csv(rf_preds, file="predictions19.csv")
```


# XGboost 

```{r}
library(xgboost)
library(tidymodels)

df_train <- df_train %>% filter(price < 10^6)

xgb_spec <- boost_tree(min_n = 4) |>
  set_mode("regression") |>
  set_engine("xgboost")

xgb_model <- xgb_spec |> 
  fit(price ~ ., data = df_train %>% select(-id))
```



```{r}

xgb_preds <- tibble(id = df_test$id,
  price = predict(xgb_model,new_data=df_test)$.pred)

xgb_preds <- xgb_preds %>% mutate(across(price, ~replace_na(., median(., na.rm=TRUE))))

write_csv(xgb_preds, file="predictions31.csv")
```


```{r}
preds <- tibble(id = df_train$id,
                pred_price =  predict(xgb_model,new_data=df_train)$.pred,
                actual_price = df_train$price)

ggplot(data = preds,aes(x = pred_price,y = actual_price)) + geom_point() + geom_smooth() #+ coord_fixed(ratio = 1)
```

